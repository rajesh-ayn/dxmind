import { __decorate } from 'tslib';
import { NgZone, Injectable, ElementRef, Input, Directive, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';
let MalihuScrollbarService = class MalihuScrollbarService {
    constructor(zone) {
        this.zone = zone;
    }
    initScrollbar(element, options) {
        const jQueryElement = this.getElement(element);
        this.zone.runOutsideAngular(() => jQueryElement.mCustomScrollbar(options));
        if (jQueryElement.length > 0 && jQueryElement[0].tagName === 'BODY') {
            jQueryElement[0].style.position = 'absolute';
            jQueryElement[0].style.overflow = 'auto';
            jQueryElement[0].style.height = '100vh';
            jQueryElement[0].style.width = '100vw';
        }
    }
    scrollTo(element, parameter, options) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('scrollTo', parameter, options));
    }
    update(element) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('update'));
    }
    stop(element) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('stop'));
    }
    disable(element, reset) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('disable', !!reset));
    }
    destroy(element) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('destroy'));
    }
    getElement(element) {
        if (typeof element === 'string') {
            return $(element);
        }
        if (typeof element === 'object' && element instanceof HTMLElement) {
            return $(element);
        }
        if (element instanceof jQuery || 'jquery' in Object(element)) {
            return element;
        }
        throw Error(`Unsupported element type in MalihuScrollbarService: ${element}`);
    }
};
MalihuScrollbarService.ɵfac = function MalihuScrollbarService_Factory(t) { return new (t || MalihuScrollbarService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
MalihuScrollbarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MalihuScrollbarService, factory: function (t) { return MalihuScrollbarService.ɵfac(t); } });
MalihuScrollbarService.ctorParameters = () => [
    { type: NgZone }
];

/**
 * Malihu Custom Scrollbar directive
 * Use this reference link for options definition
 * http://manos.malihu.gr/jquery-custom-content-scroller/
 */
let MalihuScrollbarDirective = class MalihuScrollbarDirective {
    constructor(elementRef, mScrollbarService) {
        this.elementRef = elementRef;
        this.mScrollbarService = mScrollbarService;
    }
    ngAfterViewInit() {
        this.initElements();
        this.initScrollbar();
    }
    ngOnDestroy() {
        this.destroyScrollbar();
    }
    initElements() {
        this.scrollableElement = !!this.scrollElementId
            ? $(`#${this.scrollElementId}`)
            : $(this.elementRef.nativeElement);
        if (!!this.scrollElementId && this.scrollableElement.length === 0) {
            console.error(`MalihuScrollbarDirective cannot find element with provided scrollElementId: ${this.scrollElementId}.`);
        }
    }
    initScrollbar() {
        this.mScrollbarService.initScrollbar(this.scrollableElement, this.scrollbarOptions);
    }
    destroyScrollbar() {
        try {
            this.mScrollbarService.destroy(this.scrollableElement);
        }
        catch (error) {
            // workaround for malihu-custom-scrollbar-plugin issue:
            // Cannot read property 'autoUpdate' of undefined
            // https://github.com/malihu/malihu-custom-scrollbar-plugin/issues/392
        }
    }
};
MalihuScrollbarDirective.ɵfac = function MalihuScrollbarDirective_Factory(t) { return new (t || MalihuScrollbarDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MalihuScrollbarService)); };
MalihuScrollbarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MalihuScrollbarDirective, selectors: [["", "MalihuScrollbar", ""], ["", "malihu-scrollbar", ""]], inputs: { scrollElementId: "scrollElementId", scrollbarOptions: "scrollbarOptions" } });
MalihuScrollbarDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MalihuScrollbarService }
];
__decorate([
    Input()
], MalihuScrollbarDirective.prototype, "scrollElementId", void 0);
__decorate([
    Input()
], MalihuScrollbarDirective.prototype, "scrollbarOptions", void 0);

var MalihuScrollbarModule_1;
let MalihuScrollbarModule = MalihuScrollbarModule_1 = class MalihuScrollbarModule {
    static forRoot() {
        return {
            ngModule: MalihuScrollbarModule_1,
            providers: [MalihuScrollbarService],
        };
    }
    static forChild() {
        return {
            ngModule: MalihuScrollbarModule_1,
        };
    }
};
MalihuScrollbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MalihuScrollbarModule });
MalihuScrollbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MalihuScrollbarModule_Factory(t) { return new (t || MalihuScrollbarModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MalihuScrollbarService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MalihuScrollbarDirective, [{
        type: Directive,
        args: [{
                selector: '[MalihuScrollbar], [malihu-scrollbar]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MalihuScrollbarService }]; }, { scrollElementId: [{
            type: Input
        }], scrollbarOptions: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MalihuScrollbarModule, { declarations: [MalihuScrollbarDirective], exports: [MalihuScrollbarDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MalihuScrollbarModule, [{
        type: NgModule,
        args: [{
                exports: [MalihuScrollbarDirective],
                declarations: [MalihuScrollbarDirective]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { MalihuScrollbarDirective, MalihuScrollbarModule, MalihuScrollbarService };

//# sourceMappingURL=ngx-malihu-scrollbar.js.map