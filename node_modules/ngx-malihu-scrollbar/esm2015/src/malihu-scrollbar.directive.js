import { __decorate } from "tslib";
import { AfterViewInit, Directive, ElementRef, Input, OnDestroy } from '@angular/core';
import { MalihuScrollbarService } from './malihu-scrollbar.service';
/**
 * Malihu Custom Scrollbar directive
 * Use this reference link for options definition
 * http://manos.malihu.gr/jquery-custom-content-scroller/
 */
let MalihuScrollbarDirective = class MalihuScrollbarDirective {
    constructor(elementRef, mScrollbarService) {
        this.elementRef = elementRef;
        this.mScrollbarService = mScrollbarService;
    }
    ngAfterViewInit() {
        this.initElements();
        this.initScrollbar();
    }
    ngOnDestroy() {
        this.destroyScrollbar();
    }
    initElements() {
        this.scrollableElement = !!this.scrollElementId
            ? $(`#${this.scrollElementId}`)
            : $(this.elementRef.nativeElement);
        if (!!this.scrollElementId && this.scrollableElement.length === 0) {
            console.error(`MalihuScrollbarDirective cannot find element with provided scrollElementId: ${this.scrollElementId}.`);
        }
    }
    initScrollbar() {
        this.mScrollbarService.initScrollbar(this.scrollableElement, this.scrollbarOptions);
    }
    destroyScrollbar() {
        try {
            this.mScrollbarService.destroy(this.scrollableElement);
        }
        catch (error) {
            // workaround for malihu-custom-scrollbar-plugin issue:
            // Cannot read property 'autoUpdate' of undefined
            // https://github.com/malihu/malihu-custom-scrollbar-plugin/issues/392
        }
    }
};
MalihuScrollbarDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MalihuScrollbarService }
];
__decorate([
    Input()
], MalihuScrollbarDirective.prototype, "scrollElementId", void 0);
__decorate([
    Input()
], MalihuScrollbarDirective.prototype, "scrollbarOptions", void 0);
MalihuScrollbarDirective = __decorate([
    Directive({
        selector: '[MalihuScrollbar], [malihu-scrollbar]',
    })
], MalihuScrollbarDirective);
export { MalihuScrollbarDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFsaWh1LXNjcm9sbGJhci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWFsaWh1LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbInNyYy9tYWxpaHUtc2Nyb2xsYmFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEU7Ozs7R0FJRztBQUlILElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXdCO0lBTW5DLFlBQ1UsVUFBc0IsRUFDdEIsaUJBQXlDO1FBRHpDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUF3QjtJQUMvQyxDQUFDO0lBRUwsZUFBZTtRQUNiLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWU7WUFDN0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNqRSxPQUFPLENBQUMsS0FBSyxDQUFDLCtFQUErRSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztTQUN2SDtJQUNILENBQUM7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUk7WUFDRixJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3hEO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCx1REFBdUQ7WUFDdkQsaURBQWlEO1lBQ2pELHNFQUFzRTtTQUN2RTtJQUNILENBQUM7Q0FDRixDQUFBOztZQXBDdUIsVUFBVTtZQUNILHNCQUFzQjs7QUFQMUM7SUFBUixLQUFLLEVBQUU7aUVBQXlCO0FBQ3hCO0lBQVIsS0FBSyxFQUFFO2tFQUEyRDtBQUZ4RCx3QkFBd0I7SUFIcEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHVDQUF1QztLQUNsRCxDQUFDO0dBQ1csd0JBQXdCLENBMkNwQztTQTNDWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWFsaWh1U2Nyb2xsYmFyU2VydmljZSB9IGZyb20gJy4vbWFsaWh1LXNjcm9sbGJhci5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBNYWxpaHUgQ3VzdG9tIFNjcm9sbGJhciBkaXJlY3RpdmVcclxuICogVXNlIHRoaXMgcmVmZXJlbmNlIGxpbmsgZm9yIG9wdGlvbnMgZGVmaW5pdGlvblxyXG4gKiBodHRwOi8vbWFub3MubWFsaWh1LmdyL2pxdWVyeS1jdXN0b20tY29udGVudC1zY3JvbGxlci9cclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW01hbGlodVNjcm9sbGJhcl0sIFttYWxpaHUtc2Nyb2xsYmFyXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYWxpaHVTY3JvbGxiYXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpIHNjcm9sbEVsZW1lbnRJZDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHNjcm9sbGJhck9wdGlvbnM6IE1DdXN0b21TY3JvbGxiYXIuQ3VzdG9tU2Nyb2xsYmFyT3B0aW9ucztcclxuXHJcbiAgc2Nyb2xsYWJsZUVsZW1lbnQ6IEpRdWVyeTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIG1TY3JvbGxiYXJTZXJ2aWNlOiBNYWxpaHVTY3JvbGxiYXJTZXJ2aWNlLFxyXG4gICkgeyB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuaW5pdEVsZW1lbnRzKCk7XHJcbiAgICB0aGlzLmluaXRTY3JvbGxiYXIoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5kZXN0cm95U2Nyb2xsYmFyKCk7XHJcbiAgfVxyXG5cclxuICBpbml0RWxlbWVudHMoKSB7XHJcbiAgICB0aGlzLnNjcm9sbGFibGVFbGVtZW50ID0gISF0aGlzLnNjcm9sbEVsZW1lbnRJZFxyXG4gICAgICA/ICQoYCMke3RoaXMuc2Nyb2xsRWxlbWVudElkfWApXHJcbiAgICAgIDogJCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgaWYgKCEhdGhpcy5zY3JvbGxFbGVtZW50SWQgJiYgdGhpcy5zY3JvbGxhYmxlRWxlbWVudC5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgTWFsaWh1U2Nyb2xsYmFyRGlyZWN0aXZlIGNhbm5vdCBmaW5kIGVsZW1lbnQgd2l0aCBwcm92aWRlZCBzY3JvbGxFbGVtZW50SWQ6ICR7dGhpcy5zY3JvbGxFbGVtZW50SWR9LmApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdFNjcm9sbGJhcigpIHtcclxuICAgIHRoaXMubVNjcm9sbGJhclNlcnZpY2UuaW5pdFNjcm9sbGJhcih0aGlzLnNjcm9sbGFibGVFbGVtZW50LCB0aGlzLnNjcm9sbGJhck9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveVNjcm9sbGJhcigpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMubVNjcm9sbGJhclNlcnZpY2UuZGVzdHJveSh0aGlzLnNjcm9sbGFibGVFbGVtZW50KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIHdvcmthcm91bmQgZm9yIG1hbGlodS1jdXN0b20tc2Nyb2xsYmFyLXBsdWdpbiBpc3N1ZTpcclxuICAgICAgLy8gQ2Fubm90IHJlYWQgcHJvcGVydHkgJ2F1dG9VcGRhdGUnIG9mIHVuZGVmaW5lZFxyXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWFsaWh1L21hbGlodS1jdXN0b20tc2Nyb2xsYmFyLXBsdWdpbi9pc3N1ZXMvMzkyXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==