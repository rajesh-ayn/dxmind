import { __decorate } from "tslib";
import { Injectable, NgZone } from '@angular/core';
let MalihuScrollbarService = class MalihuScrollbarService {
    constructor(zone) {
        this.zone = zone;
    }
    initScrollbar(element, options) {
        const jQueryElement = this.getElement(element);
        this.zone.runOutsideAngular(() => jQueryElement.mCustomScrollbar(options));
        if (jQueryElement.length > 0 && jQueryElement[0].tagName === 'BODY') {
            jQueryElement[0].style.position = 'absolute';
            jQueryElement[0].style.overflow = 'auto';
            jQueryElement[0].style.height = '100vh';
            jQueryElement[0].style.width = '100vw';
        }
    }
    scrollTo(element, parameter, options) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('scrollTo', parameter, options));
    }
    update(element) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('update'));
    }
    stop(element) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('stop'));
    }
    disable(element, reset) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('disable', !!reset));
    }
    destroy(element) {
        this.zone.runOutsideAngular(() => this.getElement(element).mCustomScrollbar('destroy'));
    }
    getElement(element) {
        if (typeof element === 'string') {
            return $(element);
        }
        if (typeof element === 'object' && element instanceof HTMLElement) {
            return $(element);
        }
        if (element instanceof jQuery || 'jquery' in Object(element)) {
            return element;
        }
        throw Error(`Unsupported element type in MalihuScrollbarService: ${element}`);
    }
};
MalihuScrollbarService.ctorParameters = () => [
    { type: NgZone }
];
MalihuScrollbarService = __decorate([
    Injectable()
], MalihuScrollbarService);
export { MalihuScrollbarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFsaWh1LXNjcm9sbGJhci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hbGlodS1zY3JvbGxiYXIvIiwic291cmNlcyI6WyJzcmMvbWFsaWh1LXNjcm9sbGJhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtuRCxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQUVqQyxZQUNVLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO0lBQ2xCLENBQUM7SUFFTCxhQUFhLENBQUMsT0FBc0IsRUFBRSxPQUFnRDtRQUNwRixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFM0UsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtZQUNuRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7WUFDN0MsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1lBQ3pDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztZQUN4QyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQXNCLEVBQUUsU0FBYyxFQUFFLE9BQWtEO1FBQ2pHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0csQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFzQjtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQXNCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBc0IsRUFBRSxLQUFlO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFzQjtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRU8sVUFBVSxDQUFDLE9BQXNCO1FBQ3ZDLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25CO1FBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksT0FBTyxZQUFZLFdBQVcsRUFBRTtZQUNqRSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNuQjtRQUNELElBQUksT0FBTyxZQUFZLE1BQU0sSUFBSSxRQUFRLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzVELE9BQU8sT0FBTyxDQUFDO1NBQ2hCO1FBQ0QsTUFBTSxLQUFLLENBQUMsdURBQXVELE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDaEYsQ0FBQztDQUNGLENBQUE7O1lBaERpQixNQUFNOztBQUhYLHNCQUFzQjtJQURsQyxVQUFVLEVBQUU7R0FDQSxzQkFBc0IsQ0FtRGxDO1NBbkRZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IHR5cGUgU2Nyb2xsRWxlbWVudCA9IHN0cmluZyB8IEpRdWVyeSB8IEhUTUxFbGVtZW50O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTWFsaWh1U2Nyb2xsYmFyU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSB6b25lOiBOZ1pvbmUsXHJcbiAgKSB7IH1cclxuXHJcbiAgaW5pdFNjcm9sbGJhcihlbGVtZW50OiBTY3JvbGxFbGVtZW50LCBvcHRpb25zOiBNQ3VzdG9tU2Nyb2xsYmFyLkN1c3RvbVNjcm9sbGJhck9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGpRdWVyeUVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoZWxlbWVudCk7XHJcblxyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGpRdWVyeUVsZW1lbnQubUN1c3RvbVNjcm9sbGJhcihvcHRpb25zKSk7XHJcblxyXG4gICAgaWYgKGpRdWVyeUVsZW1lbnQubGVuZ3RoID4gMCAmJiBqUXVlcnlFbGVtZW50WzBdLnRhZ05hbWUgPT09ICdCT0RZJykge1xyXG4gICAgICBqUXVlcnlFbGVtZW50WzBdLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgalF1ZXJ5RWxlbWVudFswXS5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcclxuICAgICAgalF1ZXJ5RWxlbWVudFswXS5zdHlsZS5oZWlnaHQgPSAnMTAwdmgnO1xyXG4gICAgICBqUXVlcnlFbGVtZW50WzBdLnN0eWxlLndpZHRoID0gJzEwMHZ3JztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNjcm9sbFRvKGVsZW1lbnQ6IFNjcm9sbEVsZW1lbnQsIHBhcmFtZXRlcjogYW55LCBvcHRpb25zOiBNQ3VzdG9tU2Nyb2xsYmFyLlNjcm9sbFRvUGFyYW1ldGVyT3B0aW9ucykge1xyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuZ2V0RWxlbWVudChlbGVtZW50KS5tQ3VzdG9tU2Nyb2xsYmFyKCdzY3JvbGxUbycsIHBhcmFtZXRlciwgb3B0aW9ucykpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGVsZW1lbnQ6IFNjcm9sbEVsZW1lbnQpIHtcclxuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmdldEVsZW1lbnQoZWxlbWVudCkubUN1c3RvbVNjcm9sbGJhcigndXBkYXRlJykpO1xyXG4gIH1cclxuXHJcbiAgc3RvcChlbGVtZW50OiBTY3JvbGxFbGVtZW50KSB7XHJcbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5nZXRFbGVtZW50KGVsZW1lbnQpLm1DdXN0b21TY3JvbGxiYXIoJ3N0b3AnKSk7XHJcbiAgfVxyXG5cclxuICBkaXNhYmxlKGVsZW1lbnQ6IFNjcm9sbEVsZW1lbnQsIHJlc2V0PzogYm9vbGVhbikge1xyXG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuZ2V0RWxlbWVudChlbGVtZW50KS5tQ3VzdG9tU2Nyb2xsYmFyKCdkaXNhYmxlJywgISFyZXNldCkpO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveShlbGVtZW50OiBTY3JvbGxFbGVtZW50KSB7XHJcbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5nZXRFbGVtZW50KGVsZW1lbnQpLm1DdXN0b21TY3JvbGxiYXIoJ2Rlc3Ryb3knKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEVsZW1lbnQoZWxlbWVudDogU2Nyb2xsRWxlbWVudCk6IEpRdWVyeSB7XHJcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiAkKGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnb2JqZWN0JyAmJiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuICQoZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIGpRdWVyeSB8fCAnanF1ZXJ5JyBpbiBPYmplY3QoZWxlbWVudCkpIHtcclxuICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBFcnJvcihgVW5zdXBwb3J0ZWQgZWxlbWVudCB0eXBlIGluIE1hbGlodVNjcm9sbGJhclNlcnZpY2U6ICR7ZWxlbWVudH1gKTtcclxuICB9XHJcbn1cclxuIl19