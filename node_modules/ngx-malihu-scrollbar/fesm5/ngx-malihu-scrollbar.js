import { __decorate } from 'tslib';
import { NgZone, Injectable, ElementRef, Input, Directive, NgModule } from '@angular/core';

var MalihuScrollbarService = /** @class */ (function () {
    function MalihuScrollbarService(zone) {
        this.zone = zone;
    }
    MalihuScrollbarService.prototype.initScrollbar = function (element, options) {
        var jQueryElement = this.getElement(element);
        this.zone.runOutsideAngular(function () { return jQueryElement.mCustomScrollbar(options); });
        if (jQueryElement.length > 0 && jQueryElement[0].tagName === 'BODY') {
            jQueryElement[0].style.position = 'absolute';
            jQueryElement[0].style.overflow = 'auto';
            jQueryElement[0].style.height = '100vh';
            jQueryElement[0].style.width = '100vw';
        }
    };
    MalihuScrollbarService.prototype.scrollTo = function (element, parameter, options) {
        var _this = this;
        this.zone.runOutsideAngular(function () { return _this.getElement(element).mCustomScrollbar('scrollTo', parameter, options); });
    };
    MalihuScrollbarService.prototype.update = function (element) {
        var _this = this;
        this.zone.runOutsideAngular(function () { return _this.getElement(element).mCustomScrollbar('update'); });
    };
    MalihuScrollbarService.prototype.stop = function (element) {
        var _this = this;
        this.zone.runOutsideAngular(function () { return _this.getElement(element).mCustomScrollbar('stop'); });
    };
    MalihuScrollbarService.prototype.disable = function (element, reset) {
        var _this = this;
        this.zone.runOutsideAngular(function () { return _this.getElement(element).mCustomScrollbar('disable', !!reset); });
    };
    MalihuScrollbarService.prototype.destroy = function (element) {
        var _this = this;
        this.zone.runOutsideAngular(function () { return _this.getElement(element).mCustomScrollbar('destroy'); });
    };
    MalihuScrollbarService.prototype.getElement = function (element) {
        if (typeof element === 'string') {
            return $(element);
        }
        if (typeof element === 'object' && element instanceof HTMLElement) {
            return $(element);
        }
        if (element instanceof jQuery || 'jquery' in Object(element)) {
            return element;
        }
        throw Error("Unsupported element type in MalihuScrollbarService: " + element);
    };
    MalihuScrollbarService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    MalihuScrollbarService = __decorate([
        Injectable()
    ], MalihuScrollbarService);
    return MalihuScrollbarService;
}());

/**
 * Malihu Custom Scrollbar directive
 * Use this reference link for options definition
 * http://manos.malihu.gr/jquery-custom-content-scroller/
 */
var MalihuScrollbarDirective = /** @class */ (function () {
    function MalihuScrollbarDirective(elementRef, mScrollbarService) {
        this.elementRef = elementRef;
        this.mScrollbarService = mScrollbarService;
    }
    MalihuScrollbarDirective.prototype.ngAfterViewInit = function () {
        this.initElements();
        this.initScrollbar();
    };
    MalihuScrollbarDirective.prototype.ngOnDestroy = function () {
        this.destroyScrollbar();
    };
    MalihuScrollbarDirective.prototype.initElements = function () {
        this.scrollableElement = !!this.scrollElementId
            ? $("#" + this.scrollElementId)
            : $(this.elementRef.nativeElement);
        if (!!this.scrollElementId && this.scrollableElement.length === 0) {
            console.error("MalihuScrollbarDirective cannot find element with provided scrollElementId: " + this.scrollElementId + ".");
        }
    };
    MalihuScrollbarDirective.prototype.initScrollbar = function () {
        this.mScrollbarService.initScrollbar(this.scrollableElement, this.scrollbarOptions);
    };
    MalihuScrollbarDirective.prototype.destroyScrollbar = function () {
        try {
            this.mScrollbarService.destroy(this.scrollableElement);
        }
        catch (error) {
            // workaround for malihu-custom-scrollbar-plugin issue:
            // Cannot read property 'autoUpdate' of undefined
            // https://github.com/malihu/malihu-custom-scrollbar-plugin/issues/392
        }
    };
    MalihuScrollbarDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MalihuScrollbarService }
    ]; };
    __decorate([
        Input()
    ], MalihuScrollbarDirective.prototype, "scrollElementId", void 0);
    __decorate([
        Input()
    ], MalihuScrollbarDirective.prototype, "scrollbarOptions", void 0);
    MalihuScrollbarDirective = __decorate([
        Directive({
            selector: '[MalihuScrollbar], [malihu-scrollbar]',
        })
    ], MalihuScrollbarDirective);
    return MalihuScrollbarDirective;
}());

var MalihuScrollbarModule = /** @class */ (function () {
    function MalihuScrollbarModule() {
    }
    MalihuScrollbarModule_1 = MalihuScrollbarModule;
    MalihuScrollbarModule.forRoot = function () {
        return {
            ngModule: MalihuScrollbarModule_1,
            providers: [MalihuScrollbarService],
        };
    };
    MalihuScrollbarModule.forChild = function () {
        return {
            ngModule: MalihuScrollbarModule_1,
        };
    };
    var MalihuScrollbarModule_1;
    MalihuScrollbarModule = MalihuScrollbarModule_1 = __decorate([
        NgModule({
            exports: [MalihuScrollbarDirective],
            declarations: [MalihuScrollbarDirective],
        })
    ], MalihuScrollbarModule);
    return MalihuScrollbarModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { MalihuScrollbarDirective, MalihuScrollbarModule, MalihuScrollbarService };
//# sourceMappingURL=ngx-malihu-scrollbar.js.map
